.chapter(data-title='Call Tracking with Twilio and Django')
  .step(data-file='call_tracking/views.py', data-highlight='118-138')
    :markdown
      ## What does this thing do?

      This [Django](http://djangoproject.com/) web application shows how you can
      use Twilio to track the effectiveness of different marketing channels.

      This application has three main features:

      - It purchases phone numbers from Twilio to use in different marketing
      campaigns (like a billboard or a bus advertisement)
      - It forwards incoming calls for those phone numbers to a salesperson
      - It displays charts showing data about the phone numbers and the calls
      they receive

      In this tutorial, we'll point out the key bits of code that make this
      application work.
      [Check out the project README on GitHub](https://github.com/twiliodeved/call-tracking-django)
      to see how to run the code yourself.

      Let's get started! Click the right arrow above to advance to the next
      code snippet.

      ---

      **See also:**

      * [Twilio Python Helper Library](https://github.com/twilio/twilio-python/)
      * [Twilio REST API docs](https://www.twilio.com/docs/api)
      * [Django docs](https://docs.djangoproject.com/en/1.8/)
      * [What is Call Tracking?](http://www.searchenginejournal.com/seo-beginner-guide-call-tracking-care/83173/)

  .step(data-file='call_tracking/utils.py', data-highlight='1-17')
    :markdown
      ## Search for available phone numbers

      Before users can do anything with our app, they have to find an available
      Twilio phone number to purchase. We can search for a number using the
      Twilio REST API.

      Using the twilio-python helper library, we first create a `TwilioRestClient`
      in a `utils.py` module. `TwilioRestClient` looks for environment variables
      to find its credentials.

      Once we've got our `client` ready, searching for available phone numbers
      is as easy as `phone_numbers.search()`. Twilio will return a list
      of phone numbers for our user to choose from.

      Let's look at the Django view which calls this code next.

      ---

      **See also:**

      * [Accessing REST resources with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/basics.html)
      * [Searching and Buying a Number with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/phone-numbers.html#searching-and-buying-a-number)
      * [Twilio REST API: Available Phone Numbers](https://www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='call_tracking/views.py', data-highlight='49-77')
    :markdown
      ## List phone numbers view

      When searching for a phone number, our users can optionally specify an
      area code. Our `list_numbers` view starts off validating that input with
      a one-field form called `AreaCodeForm`.

      We then call our `search_phone_numbers` function from the previous step
      to retrieve a list of available numbers. If that list comes back empty
      we redirect the user back home and tell them to try a different area code.

      Otherwise we use those numbers to render the `list_numbers.html` template,
      which is where our users will choose which number they want to purchase.

      ---

      **See also:**

      * [Django forms overview](https://docs.djangoproject.com/en/1.8/topics/forms/)
      * [Django messages framework](https://docs.djangoproject.com/en/1.8/ref/contrib/messages/)

  .step(data-file='call_tracking/utils.py')
    :markdown
      ## Purchase a phone number

      Our `purchase_phone_number` utility function takes a phone number as its
      sole parameter and uses our Twilio API client to make the purchase.

      We also pass an extra argument to our `phone_numbers.purchase()` call for
      `voice_application_sid`. This lets us configure the new number to use
      a TwiML app for its Voice URL.

      TwiML apps let us apply the same URL configuration across all numbers we
      purchase. They're really handy for applications like ours, where we want
      calls to each of our numbers to use the same Voice URL on our server.

      To run our application yourself, you'll need to [create your own TwiML app
      first](https://www.twilio.com/help/faq/twilio-client/how-do-i-create-a-twiml-app).

      We'll look at the view which calls this function next.

      ---

      **See also:**

      * [Searching and Buying a Number with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/phone-numbers.html#searching-and-buying-a-number)
      * [Twilio REST API: Available Phone Numbers](https://www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='call_tracking/views.py', data-highlight='80-106')
    :markdown
      ## Purchase phone number view

      Our `purchase_number` view starts off sanitizing our POST data again, this
      time using a form called `PurchaseNumberForm`.

      The `phone_number` field on that form is a third-party field from the
      [django-phonenumber-field](https://github.com/stefanfoulis/django-phonenumber-field)
      library. Our purchase function expects its phone number
      argument to look like `+155555555555`, so we need to use the form field's
      `.as_e164` property to get the right format.

      After the number has been purchased, we save it in a new instance of our
      `LeadSource` model and redirect our user to a page where they can fill in
      the model's other fields.

      Let's take a look at those other fields now.

      ---

      **See also:**

      * [Django forms overview](https://docs.djangoproject.com/en/1.8/topics/forms/)
      * [Django messages framework](https://docs.djangoproject.com/en/1.8/ref/contrib/messages/)
      * [Django redirect shortcut](https://docs.djangoproject.com/en/1.8/topics/http/shortcuts/#redirect)
      * [E.164 format](https://en.wikipedia.org/wiki/E.164)

  .step(data-file='call_tracking/models.py', data-highlight='22-40')
    :markdown
      ## The LeadSource model

      Our `LeadSource` model stores the numbers we purchase from Twilio in our
      database.

      We store the Twilio phone number in the `incoming_number` field and the
      employee's phone number in the `forwarding_number` field. We use the
      [django-phonenumber-field](https://github.com/stefanfoulis/django-phonenumber-field)
      library here again - this time for its `PhoneNumberField` model field.

      To capture data about how many phone calls each `LeadSource` receives, we
      use a different model, `Lead`. Let's look at that now.

      ---

      **See also:**

      * [Django Models](https://docs.djangoproject.com/en/1.8/topics/db/models/)
      * [Django @python_2_unicode_compatible decorator](https://docs.djangoproject.com/en/1.8/topics/python3/#str-and-unicode-methods)

  .step(data-file='call_tracking/models.py', data-highlight='59-74')
    :markdown
      ## The Lead model

      A `Lead` represents a phone call to one of our phone numbers. Each time
      somebody calls one of our Twilio numbers, we'll use the `Lead` model to
      record some data about their call.

      We use a ForiegnKey field to associate each `Lead` with a `LeadSource`,
      and we again use
      [django-phonenumber-field](https://github.com/stefanfoulis/django-phonenumber-field)'s
      `PhoneNumberField` to store the caller's phone number.

      We also include fields for some metadata Twilio provides about incoming
      calls. City and state are just two examples -
      [check out the docs for more](https://www.twilio.com/docs/api/twiml/twilio_request).

      `Lead`s are created in our `forward_call` view - let's look at that next.

      ---

      **See also:**

      * [Django ForeignKey relationships](https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/)

  .step(data-file='call_tracking/views.py', data-highlight='118-138')
    :markdown
      ## Forward calls and create Leads

      Our `forward_call` view is wired up to the `/call-tracking/forward-call`
      URL of our application. Whenever someone calls one of our Twilio numbers,
      Twilio will send a POST request to that URL with data about the
      incoming call.

      Our view's job is to to connect the caller to the correct
      `forwarding_number` and record some data about their call.

      We start by using the `Called` value in the POST data to determine the
      `LeadSource` for this call.

      We then store some data about this call by creating a new `Lead` object
      using the `CallerCity` and `CallerState` fields Twilio sent us in the
      POST data.

      Finally, we wrap up the response by creating some
      [TwiML](https://www.twilio.com/docs/api/twiml) that connects our caller
      with the `forwarding_number` of our `LeadSource` using the <Dial> TwiML
      verb.

      ---

      **See also:**

      * [Twilio voice request parameters](https://www.twilio.com/docs/api/twiml/twilio_request)
      * [@csrf_exempt decorator](https://docs.djangoproject.com/en/1.8/ref/csrf/#edge-cases)
      * [TwiML creation with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/twiml.html)
      * [TwiML <Dial> verb](https://www.twilio.com/docs/api/twiml/dial)

  .step(data-file='call_tracking/models.py', data-highlight='1-40')
    :markdown
      ## Get statistics about our Lead Sources

      - A brief sentence about why these stats might be useful
      - Explain use of Django's annotation feature (and `.values()` method) to get these stats
      - Explain why this is a `classmethod` instead of a regular model method
      - Transition to Chart.js step

      ---

      **See also:**

      * [Django custom model managers](https://docs.djangoproject.com/en/1.8/topics/db/managers/)
      * [Django annotate feature](https://docs.djangoproject.com/en/1.8/topics/db/aggregation/#generating-aggregates-for-each-item-in-a-queryset)
      * [Django queryset values() method](https://docs.djangoproject.com/en/1.8/ref/models/querysets/#values)

  .step(data-file='call_tracking/static/js/callTracking.js')
    :markdown
      ## Visualize our statistics with Chart.js

      - Explain choice of Chart.js library for this tutorial (simplicity)
      - Allude to JSON views which provide this data using the methods covered in the previous step
      - Explain data munging to get data in right format for Chart.js
      - Include screenshot of what populated charts look like


      ---

      **See also:**

      * [Chart.js pie charts](http://www.chartjs.org/docs/#doughnut-pie-chart)
      * [jQuery $.get() method](https://api.jquery.com/jquery.get/)

  .step(data-file='call_tracking/views.py', data-highlight='118-138')
    :markdown
      ## Where to next?

      - Wrap up text
      - Link to other tutorials:
        - Click to call - https://www.twilio.com/docs/howto/walkthrough/click-to-call/python/flask
        - Appointment Reminders - https://www.twilio.com/docs/howto/walkthrough/appointment-reminders/python/django
      - Email us with feedback - devedoss@twilio.com
